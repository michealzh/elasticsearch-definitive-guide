[[partial-updates-to-a-document]]
=== 局部更新文档

`update` API  <<img-distrib-update>>结合了先前说明的读取和写入模式((("updating documents", "partial updates")))((("documents", "partial updates")))。

[[img-distrib-update]]
.局部更新文档
image::images/elas_0404.png["局部更新文档"]

以下是用来对文档执行部分更新的步骤顺序：

1. 客户端向 `Node 1` 发送更新请求。

2. 它将请求转发到分配主分片所在的 `Node 3` .

3. `Node 3` 从主分片检索文档，修改 changes `_source` 字段中的JSON，并且尝试重新索引主分片的文档。
   如果文档已经被另外一个进程修改，它会在放弃前尝试重复步骤3直到达到设置的 `retry_on_conflict` 次数。

4. 如果 `Node 3` 成功地更新文档，它将新版本的文档并行转发到 `Node 1` 和 `Node 2` 上的复制分片，重新建立索引。
   一旦所有副本分片报告成功， `Node 3` 向协调节点报告成功，协调节点向客户端报告成功。

`update` API 还接受在 <<新建，索引和删除文档>> 章节中提到的 `routing`， `replication`， `consistency` `timeout` 参数。

.基于文档的复制
****

当主分片把更改转发到副本分片时，((("primary shards", "forwarding changes to replica shards"))) 它不会转发更新请求。
相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。
如果Elasticsearch仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。

****
